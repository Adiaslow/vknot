---
import LabelLayout from "../../layouts/LabelLayout.astro";
import { fetchSpotifyAlbum, transformSpotifyAlbumToRelease } from "../../utils/spotify";
import { releases as releaseConfigs } from "../../data/releases";

// Fetch Spotify data for all releases
const releases = await Promise.all(
  releaseConfigs.map(async (config) => {
    const spotifyAlbum = await fetchSpotifyAlbum(config.spotifyAlbumId);

    if (!spotifyAlbum) {
      throw new Error(`Failed to fetch Spotify album data for ${config.catalogNumber}. Please check your Spotify credentials in .env file.`);
    }

    const spotifyData = transformSpotifyAlbumToRelease(spotifyAlbum);

    return {
      // From Spotify
      title: spotifyData.title,
      artist: spotifyData.artist,
      year: spotifyData.year,
      releaseDate: new Date(spotifyData.releaseDate).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: '2-digit'
      }),
      artwork: spotifyData.artwork,
      tracklist: spotifyData.tracklist,
      duration: spotifyData.duration,

      // From config
      catalogNumber: config.catalogNumber,
      genres: config.genres,
      subgenres: config.subgenres,
      style: config.style,
      slug: config.slug,
      description: config.description,
      artistSlug: config.artistSlug,
      vinylArtwork: config.vinylArtwork,
    };
  })
);
---

<LabelLayout
  title="Releases"
  description="Complete discography from Tender Circuits."
>
  <section class="flex flex-col gap-12">
    <div class="card rounded-2xl p-8">
      <div class="flex flex-col gap-4">
        <h1 class="text-4xl font-medium text-cream-100 tracking-tight">Discography</h1>
        <p class="text-lg text-cream-200 leading-relaxed max-w-3xl">
          A curated collection of releases exploring the boundaries between
          ambient electronics, experimental composition, and electroacoustic sound
          design.
        </p>
      </div>
    </div>

    <div class="flex flex-col gap-16">
      {
        releases.map((release) => (
          <article class="flex flex-col gap-8">
            {/* Album Artwork - Full width card that affects fur but without glassmorphic styling */}
            {(release.vinylArtwork || release.artwork) && (
              <div class={release.vinylArtwork ? "card vinyl-card w-full" : "card w-full"}>
                <a href={`/tender_circuits/releases/${release.slug}`} class="block">
                  <img
                    src={release.vinylArtwork || release.artwork}
                    alt={`${release.title} album artwork`}
                    class={release.vinylArtwork ? "vinyl-artwork w-full h-auto" : "velvet-artwork-frame w-full h-auto"}
                  />
                </a>
              </div>
            )}

            {/* Release Info - Full width glassmorphic card */}
            <div class="card group rounded-2xl overflow-hidden w-full">
              <div class="flex flex-col gap-8 p-8">
                {/* Release Header */}
                <div class="flex flex-col gap-6">
                <div class="flex flex-col gap-4">
                  <div class="flex items-center gap-3 text-sm text-warmGray-500">
                    <span>{release.catalogNumber}</span>
                    <span>•</span>
                    <span>{release.releaseDate}</span>
                  </div>

                  <div class="flex flex-col gap-2">
                    <h2 class="text-3xl font-medium text-cream-100 group-hover:text-cream-50 transition-colors">
                      {release.title}
                    </h2>
                    <p class="text-xl text-cream-200">by {release.artist}</p>
                  </div>

                  <p class="text-warmGray-400 leading-relaxed max-w-3xl">
                    {release.description}
                  </p>
                </div>

                {/* Genres and Style */}
                <div class="text-sm text-warmGray-400">
                  {release.genres.join(" / ")}
                  {release.subgenres.length > 0 && " • " + release.subgenres.join(" / ")}
                  {" • " + release.style}
                </div>
              </div>

              {/* Track Listing */}
              <div class="flex flex-col gap-4">
                <div class="flex items-center justify-between">
                  <h3 class="text-sm font-medium text-warmGray-500">
                    Tracklist
                  </h3>
                  <span class="text-sm text-warmGray-500">
                    {release.duration}
                  </span>
                </div>

                <div class="grid gap-1">
                  {release.tracklist.map((track, index) => (
                    <div class="flex items-center gap-3 py-2 px-3 rounded-lg hover:bg-white/5 transition-colors" data-track-player>
                      <span class="text-xs text-warmGray-500 w-6 text-right">
                        {(index + 1).toString().padStart(2, "0")}
                      </span>
                      <span class="text-cream-200 flex-1">{track.title}</span>

                      {/* Mini Audio Player */}
                      {track.previewUrl && (
                        <div class="flex items-center gap-2">
                          {/* Skip back 15s */}
                          <button class="skip-back text-warmGray-400 hover:text-cream-200 transition-colors" aria-label="Skip back 15 seconds">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0019 16V8a1 1 0 00-1.6-.8l-5.333 4zM4.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0011 16V8a1 1 0 00-1.6-.8l-5.334 4z"/>
                            </svg>
                          </button>

                          {/* Play/Pause */}
                          <button class="play-pause text-terracotta-500 hover:text-terracotta-400 transition-colors" aria-label="Play/Pause">
                            <svg class="play-icon w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M8 5v14l11-7z"/>
                            </svg>
                            <svg class="pause-icon w-5 h-5 hidden" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>
                            </svg>
                          </button>

                          {/* Skip forward 15s */}
                          <button class="skip-forward text-warmGray-400 hover:text-cream-200 transition-colors" aria-label="Skip forward 15 seconds">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.933 12.8a1 1 0 000-1.6L6.6 7.2A1 1 0 005 8v8a1 1 0 001.6.8l5.333-4zM19.933 12.8a1 1 0 000-1.6l-5.333-4A1 1 0 0013 8v8a1 1 0 001.6.8l5.333-4z"/>
                            </svg>
                          </button>

                          {/* Progress bar */}
                          <div class="flex items-center gap-2 min-w-[120px]">
                            <input type="range" min="0" max="100" value="0" class="progress-bar flex-1 h-1 bg-warmGray-600/30 rounded-lg appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-2 [&::-webkit-slider-thumb]:h-2 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-terracotta-500 [&::-moz-range-thumb]:w-2 [&::-moz-range-thumb]:h-2 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-terracotta-500 [&::-moz-range-thumb]:border-0"/>
                            <span class="time-display text-xs text-warmGray-500 min-w-[40px]">0:00</span>
                          </div>

                          {/* Hidden audio element */}
                          <audio class="hidden" preload="none" src={track.previewUrl}></audio>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

                {/* Actions */}
                <div class="flex items-center gap-4 pt-6">
                  <a
                    class="text-sm font-medium text-terracotta-500 hover:text-terracotta-400 transition-colors"
                    href={`/tender_circuits/releases/${release.slug}`}
                  >
                    Listen
                  </a>
                  <span class="text-warmGray-500">•</span>
                  <a
                    class="text-sm font-medium text-warmGray-400 hover:text-cream-200 transition-colors"
                    href={`/tender_circuits/artists/${release.artistSlug}`}
                  >
                    Artist Profile
                  </a>
                </div>
              </div>
            </div>
            </div>
          </article>
        ))
      }
    </div>

    {/* Future Releases Section */}
    <section class="card rounded-2xl p-8">
      <div class="flex flex-col gap-4 text-center">
        <h2 class="text-2xl font-medium text-cream-100">Upcoming Releases</h2>
        <p class="text-warmGray-400 leading-relaxed max-w-2xl mx-auto">
          More ambient and experimental releases are in development. Follow the
          label for announcements and previews.
        </p>
        <div class="pt-2">
          <span class="text-sm text-warmGray-500">
            More coming soon
          </span>
        </div>
      </div>
    </section>
  </section>
</LabelLayout>

<script>
  // Audio player functionality
  function initializeAudioPlayers() {
    const players = document.querySelectorAll('[data-track-player]');
    let currentlyPlaying: HTMLAudioElement | null = null;

    players.forEach((player) => {
      const audio = player.querySelector('audio') as HTMLAudioElement;
      if (!audio) return;

      const playPauseBtn = player.querySelector('.play-pause') as HTMLButtonElement;
      const playIcon = player.querySelector('.play-icon') as SVGElement;
      const pauseIcon = player.querySelector('.pause-icon') as SVGElement;
      const skipBackBtn = player.querySelector('.skip-back') as HTMLButtonElement;
      const skipForwardBtn = player.querySelector('.skip-forward') as HTMLButtonElement;
      const progressBar = player.querySelector('.progress-bar') as HTMLInputElement;
      const timeDisplay = player.querySelector('.time-display') as HTMLSpanElement;

      // Format time as M:SS
      const formatTime = (seconds: number): string => {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
      };

      // Play/Pause toggle
      playPauseBtn.addEventListener('click', () => {
        if (audio.paused) {
          // Pause any currently playing audio
          if (currentlyPlaying && currentlyPlaying !== audio) {
            currentlyPlaying.pause();
          }
          audio.play();
          currentlyPlaying = audio;
          playIcon.classList.add('hidden');
          pauseIcon.classList.remove('hidden');
        } else {
          audio.pause();
          playIcon.classList.remove('hidden');
          pauseIcon.classList.add('hidden');
        }
      });

      // Skip back 15 seconds
      skipBackBtn.addEventListener('click', () => {
        audio.currentTime = Math.max(0, audio.currentTime - 15);
      });

      // Skip forward 15 seconds
      skipForwardBtn.addEventListener('click', () => {
        audio.currentTime = Math.min(audio.duration, audio.currentTime + 15);
      });

      // Update progress bar and time as audio plays
      audio.addEventListener('timeupdate', () => {
        if (audio.duration) {
          const progress = (audio.currentTime / audio.duration) * 100;
          progressBar.value = progress.toString();
          timeDisplay.textContent = formatTime(audio.currentTime);
        }
      });

      // Seek when progress bar is changed
      progressBar.addEventListener('input', () => {
        const time = (parseFloat(progressBar.value) / 100) * audio.duration;
        audio.currentTime = time;
      });

      // Reset play icon when audio ends
      audio.addEventListener('ended', () => {
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
        progressBar.value = '0';
        timeDisplay.textContent = '0:00';
      });

      // Handle other players pausing this one
      audio.addEventListener('pause', () => {
        if (audio !== currentlyPlaying) {
          playIcon.classList.remove('hidden');
          pauseIcon.classList.add('hidden');
        }
      });
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAudioPlayers);
  } else {
    initializeAudioPlayers();
  }
</script>

